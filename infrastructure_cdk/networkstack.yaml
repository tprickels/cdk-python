Resources:
  VPCB9E5F0B4:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.10.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: Network-Stack/VPC
    Metadata:
      aws:cdk:path: Network-Stack/VPC/Resource
  VPCPublicSubnet1SubnetB4246D30:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.10.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: Network-Stack/VPC/PublicSubnet1
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PublicSubnet1/Subnet
  VPCPublicSubnet1RouteTableFEE4B781:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Network-Stack/VPC/PublicSubnet1
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PublicSubnet1/RouteTable
  VPCPublicSubnet1RouteTableAssociation0B0896DC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTableFEE4B781
      SubnetId:
        Ref: VPCPublicSubnet1SubnetB4246D30
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PublicSubnet1/RouteTableAssociation
  VPCPublicSubnet1DefaultRoute91CEF279:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
      RouteTableId:
        Ref: VPCPublicSubnet1RouteTableFEE4B781
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PublicSubnet1/DefaultRoute
  VPCPublicSubnet1EIP6AD938E8:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Network-Stack/VPC/PublicSubnet1
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PublicSubnet1/EIP
  VPCPublicSubnet1NATGatewayE0556630:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId:
        Fn::GetAtt:
          - VPCPublicSubnet1EIP6AD938E8
          - AllocationId
      SubnetId:
        Ref: VPCPublicSubnet1SubnetB4246D30
      Tags:
        - Key: Name
          Value: Network-Stack/VPC/PublicSubnet1
    DependsOn:
      - VPCPublicSubnet1DefaultRoute91CEF279
      - VPCPublicSubnet1RouteTableAssociation0B0896DC
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PublicSubnet1/NATGateway
  VPCPublicSubnet2Subnet74179F39:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.10.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Public
        - Key: aws-cdk:subnet-type
          Value: Public
        - Key: Name
          Value: Network-Stack/VPC/PublicSubnet2
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PublicSubnet2/Subnet
  VPCPublicSubnet2RouteTable6F1A15F1:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Network-Stack/VPC/PublicSubnet2
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PublicSubnet2/RouteTable
  VPCPublicSubnet2RouteTableAssociation5A808732:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable6F1A15F1
      SubnetId:
        Ref: VPCPublicSubnet2Subnet74179F39
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PublicSubnet2/RouteTableAssociation
  VPCPublicSubnet2DefaultRouteB7481BBA:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: VPCIGWB7E252D3
      RouteTableId:
        Ref: VPCPublicSubnet2RouteTable6F1A15F1
    DependsOn:
      - VPCVPCGW99B986DC
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PublicSubnet2/DefaultRoute
  VPCPrivateSubnet1Subnet8BCA10E0:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.10.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: Network-Stack/VPC/PrivateSubnet1
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PrivateSubnet1/Subnet
  VPCPrivateSubnet1RouteTableBE8A6027:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Network-Stack/VPC/PrivateSubnet1
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PrivateSubnet1/RouteTable
  VPCPrivateSubnet1RouteTableAssociation347902D1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTableBE8A6027
      SubnetId:
        Ref: VPCPrivateSubnet1Subnet8BCA10E0
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PrivateSubnet1/RouteTableAssociation
  VPCPrivateSubnet1DefaultRouteAE1D6490:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCPublicSubnet1NATGatewayE0556630
      RouteTableId:
        Ref: VPCPrivateSubnet1RouteTableBE8A6027
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PrivateSubnet1/DefaultRoute
  VPCPrivateSubnet2SubnetCFCDAA7A:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.10.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: Private
        - Key: aws-cdk:subnet-type
          Value: Private
        - Key: Name
          Value: Network-Stack/VPC/PrivateSubnet2
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PrivateSubnet2/Subnet
  VPCPrivateSubnet2RouteTable0A19E10E:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Network-Stack/VPC/PrivateSubnet2
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PrivateSubnet2/RouteTable
  VPCPrivateSubnet2RouteTableAssociation0C73D413:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable0A19E10E
      SubnetId:
        Ref: VPCPrivateSubnet2SubnetCFCDAA7A
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PrivateSubnet2/RouteTableAssociation
  VPCPrivateSubnet2DefaultRouteF4F5CFD2:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId:
        Ref: VPCPublicSubnet1NATGatewayE0556630
      RouteTableId:
        Ref: VPCPrivateSubnet2RouteTable0A19E10E
    Metadata:
      aws:cdk:path: Network-Stack/VPC/PrivateSubnet2/DefaultRoute
  VPCDBSubnet1Subnet5E0CF118:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      CidrBlock: 10.10.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: DB
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: Network-Stack/VPC/DBSubnet1
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/DBSubnet1/Subnet
  VPCDBSubnet1RouteTableD25F5A48:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Network-Stack/VPC/DBSubnet1
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/DBSubnet1/RouteTable
  VPCDBSubnet1RouteTableAssociationDC8481F9:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCDBSubnet1RouteTableD25F5A48
      SubnetId:
        Ref: VPCDBSubnet1Subnet5E0CF118
    Metadata:
      aws:cdk:path: Network-Stack/VPC/DBSubnet1/RouteTableAssociation
  VPCDBSubnet2SubnetDABA49CF:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs: ""
      CidrBlock: 10.10.5.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: aws-cdk:subnet-name
          Value: DB
        - Key: aws-cdk:subnet-type
          Value: Isolated
        - Key: Name
          Value: Network-Stack/VPC/DBSubnet2
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/DBSubnet2/Subnet
  VPCDBSubnet2RouteTable51E969F8:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        - Key: Name
          Value: Network-Stack/VPC/DBSubnet2
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/DBSubnet2/RouteTable
  VPCDBSubnet2RouteTableAssociationF6FBF57B:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: VPCDBSubnet2RouteTable51E969F8
      SubnetId:
        Ref: VPCDBSubnet2SubnetDABA49CF
    Metadata:
      aws:cdk:path: Network-Stack/VPC/DBSubnet2/RouteTableAssociation
  VPCIGWB7E252D3:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: Network-Stack/VPC
    Metadata:
      aws:cdk:path: Network-Stack/VPC/IGW
  VPCVPCGW99B986DC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: VPCIGWB7E252D3
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/VPC/VPCGW
  VPCRestrictDefaultSecurityGroupCustomResource59474679:
    Type: Custom::VpcRestrictDefaultSG
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E
          - Arn
      DefaultSecurityGroupId:
        Fn::GetAtt:
          - VPCB9E5F0B4
          - DefaultSecurityGroup
      Account:
        Ref: AWS::AccountId
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: Network-Stack/VPC/RestrictDefaultSecurityGroupCustomResource/Default
  CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: sts:AssumeRole
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      ManagedPolicyArns:
        - Fn::Sub: arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: Inline
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - ec2:AuthorizeSecurityGroupIngress
                  - ec2:AuthorizeSecurityGroupEgress
                  - ec2:RevokeSecurityGroupIngress
                  - ec2:RevokeSecurityGroupEgress
                Resource:
                  - Fn::Join:
                      - ""
                      - - "arn:aws:ec2:us-west-2:"
                        - Ref: AWS::AccountId
                        - :security-group/
                        - Fn::GetAtt:
                            - VPCB9E5F0B4
                            - DefaultSecurityGroup
    Metadata:
      aws:cdk:path: Network-Stack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role
  CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-us-west-2
        S3Key: ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a.zip
      Timeout: 900
      MemorySize: 128
      Handler: __entrypoint__.handler
      Role:
        Fn::GetAtt:
          - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
          - Arn
      Runtime: nodejs20.x
      Description: Lambda function for removing all inbound/outbound rules from the VPC default security group
    DependsOn:
      - CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0
    Metadata:
      aws:cdk:path: Network-Stack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler
      aws:asset:path: asset.ee7de53d64cc9d6248fa6aa550f92358f6c907b5efd6f3298aeab1b5e7ea358a
      aws:asset:property: Code
  DBNacl708D271E:
    Type: AWS::EC2::NetworkAcl
    Properties:
      Tags:
        - Key: Name
          Value: Network-Stack/DBNacl
      VpcId:
        Ref: VPCB9E5F0B4
    Metadata:
      aws:cdk:path: Network-Stack/DBNacl/Resource
  DBNaclDefaultAssociationNetworkStackVPCDBSubnet116E15A239E4465F3:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: DBNacl708D271E
      SubnetId:
        Ref: VPCDBSubnet1Subnet5E0CF118
    Metadata:
      aws:cdk:path: Network-Stack/DBNacl/DefaultAssociationNetworkStackVPCDBSubnet116E15A23/Resource
  DBNaclDefaultAssociationNetworkStackVPCDBSubnet29CBECC50BC79A35F:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      NetworkAclId:
        Ref: DBNacl708D271E
      SubnetId:
        Ref: VPCDBSubnet2SubnetDABA49CF
    Metadata:
      aws:cdk:path: Network-Stack/DBNacl/DefaultAssociationNetworkStackVPCDBSubnet29CBECC50/Resource
  DBNaclDbNACLIngress100F2B9465B:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 10.10.2.0/24
      Egress: false
      NetworkAclId:
        Ref: DBNacl708D271E
      PortRange:
        From: 5432
        To: 5432
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100
    Metadata:
      aws:cdk:path: Network-Stack/DBNacl/DbNACLIngress100/Resource
  DBNaclDbNACLIngress2009618B27D:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 10.10.3.0/24
      Egress: false
      NetworkAclId:
        Ref: DBNacl708D271E
      PortRange:
        From: 5432
        To: 5432
      Protocol: 6
      RuleAction: allow
      RuleNumber: 200
    Metadata:
      aws:cdk:path: Network-Stack/DBNacl/DbNACLIngress200/Resource
  DBNaclDbNACLEgress100ED61A02F:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 10.10.2.0/24
      Egress: true
      NetworkAclId:
        Ref: DBNacl708D271E
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 100
    Metadata:
      aws:cdk:path: Network-Stack/DBNacl/DbNACLEgress100/Resource
  DBNaclDbNACLEgress200DA8925A7:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      CidrBlock: 10.10.3.0/24
      Egress: true
      NetworkAclId:
        Ref: DBNacl708D271E
      PortRange:
        From: 1024
        To: 65535
      Protocol: 6
      RuleAction: allow
      RuleNumber: 200
    Metadata:
      aws:cdk:path: Network-Stack/DBNacl/DbNACLEgress200/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/32OQWvCQBCFf4v3dYtR6DkNUrzYJSley2QddZtkVnZmDUH87yWmuLTQnua9b948JtOL1bNezqDnud0389bV+loJ2EZBzx9oM33dna0qDrQzhTKxbp2tYk0oI0uq9FHwHeoWE08sZ/bWgThPj/Ao1hszji3IKwj2MCgT3AUEU/GGBAPhIzB98u1yEbCnDknUFqX3oclte29MbqpK4Ncv/60TXZOE4WfxHd1UiexjsKiKyOK7ZA/0x8oEf3F7DC/AqHJmlErg6Og43rxFOUe5KTPIydPTUi8yvZp9snPzEElch7qc5hewnYlxuwEAAA==
    Metadata:
      aws:cdk:path: Network-Stack/CDKMetadata/Default
Outputs:
  Output:
    Value:
      Ref: VPCB9E5F0B4
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
      - Assert:
          Fn::Not:
            - Fn::Contains:
                - - "1"
                  - "2"
                  - "3"
                  - "4"
                  - "5"
                - Ref: BootstrapVersion
        AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.

